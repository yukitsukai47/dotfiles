(set-language-environment 'Japanese)
(set-language-environment  'utf-8)
(prefer-coding-system 'utf-8)

(global-unset-key "\C-q")
(global-set-key (kbd "C-h") 'delete-backward-char)
(global-set-key (kbd "C-c C-h") 'help-command)

(global-set-key (kbd "C-q -")  'split-window-vertically)
(global-set-key (kbd "C-q |")  'split-window-horizontally)
(global-set-key (kbd "C-q x")  'delete-window)
(global-set-key (kbd "C-q c")  'make-frame-command)
(global-set-key (kbd "C-q n")  'other-frame)
(global-set-key (kbd "C-q C-b")  'windmove-left)
(global-set-key (kbd "C-q C-n")  'windmove-down)
(global-set-key (kbd "C-q C-p")  'windmove-up)
(global-set-key (kbd "C-q C-f") 'windmove-right)
(global-set-key "\M-n" (kbd "C-u 5 C-n"))
(global-set-key "\M-p" (kbd "C-u 5 C-p"))

(menu-bar-mode -1)
(setq initial-scratch-message nil)
(setq inhibit-startup-message t)
(setq scroll-conservatively 1)
(setq default-tab-width 4)
(setq make-backup-files nil)
(setq auto-save-default nil)
(column-number-mode t)
(global-linum-mode t)
(set-face-attribute 'linum nil
            :foreground "yellow1"
            :height 0.9)
(show-paren-mode t)
(set-face-background 'show-paren-match nil)
(set-face-attribute 'show-paren-match nil
                    :inherit 'highlight)

(set-face-foreground 'default "white")
(set-face-background 'default "black")
(set-face-foreground 'font-lock-type-face "green1")
(set-face-foreground 'font-lock-variable-name-face "white")
(set-face-foreground 'font-lock-function-name-face "yellow1")
(set-face-foreground 'font-lock-builtin-face "magenta1")
(set-face-foreground 'font-lock-keyword-face "cyan1")
(set-face-foreground 'font-lock-string-face "red1")
(set-face-foreground 'font-lock-comment-face "green1")
(set-face-foreground 'font-lock-constant-face "cyan1")
(set-face-foreground 'font-lock-warning-face "violet")

; copy-paste
; mac
(when (eq system-type 'darwin)
	  (defun copy-from-darwin ()
	    (shell-command-to-string "pbpaste"))
	  (defun paste-to-darwin (text &optional push)
	    (let ((process-connection-type nil))
	      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
		(process-send-string proc text)
		(process-send-eof proc))))
	  (setq interprogram-cut-function 'paste-to-darwin)
	  (setq interprogram-paste-function 'copy-from-darwin)
	  )
; linux
(when (eq system-type 'gnu/linux)
  (defun copy-from-linux (text &optional push)
    (interactive)
    (if (display-graphic-p)
	(progn
	  (message "Yanked region to x-clipboard!")
	  (call-interactively 'clipboard-kill-ring-save)
	  )
      (if (region-active-p)
	  (progn
	    (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
	    (message "Yanked region to clipboard!")
	    (deactivate-mark))
	(message "No region active; can't yank to clipboard!")))
    )
  (defun paste-to-linux ()
    (interactive)
    (if (display-graphic-p)
	(progn
	  (clipboard-yank)
	  (message "graphics active")
	  )
      (insert (shell-command-to-string "xsel -o -b"))
      )
    )
  (setq interprogram-cut-function 'copy-from-linux)
  (setq interprogram-paste-function 'paste-to-linux)
  )

; wsl
(defun wsl-copy (start end)
  (interactive "r")
  (shell-command-on-region start end "/mnt/c/Windows/System32/clip.exe")
  (deactivate-mark))

(defun wsl-paste ()
  (interactive)
  (let ((clipboard
     (shell-command-to-string "powershell.exe -command 'Get-Clipboard' 2> /dev/null")))
    (setq clipboard (replace-regexp-in-string "\r" "" clipboard))
    (setq clipboard (substring clipboard 0 -1))
    (insert clipboard)))

(global-set-key(kbd "C-c C-c")'wsl-copy)
(global-set-key(kbd "C-c C-v")'wsl-paste)
